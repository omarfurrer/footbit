<?php

namespace App\Services;

use App\Repositories\Eloquent\MatchesRepositoryEloquent;
use Carbon\Carbon;

class MatchManagerService {

    /**
     * Matches Repository.
     *
     * @var  MatchesRepositoryEloquent
     */
    protected $matchesRepository;

    /**
     * Array of error messages generated by the tournament manager.
     *
     * @var array
     */
    protected $errorMessages = [];

    /**
     * Tournament
     *
     * @var Tournament
     */
    protected $match;

    /**
     * Default constructor.
     *
     * @param MatchesRepositoryEloquent $matchesRepository
     */
    public function __construct(MatchesRepositoryEloquent $matchesRepository)
    {

        $this->matchesRepository = $matchesRepository;
    }

    /**
     * Reset the data for the manager class.
     */
    public function reset()
    {
        $this->errorMessages = [];
        $this->match = null;
    }

    /**
     * Load a match in the manager.
     *
     * @param Integer $id
     * @return boolean
     */
    public function load($id)
    {
        $this->reset();

        $match = $this->matchesRepository->find($id);

        if (!$match) {
            return $match;
        }

        $this->match = $match;

        return true;
    }

    /**
     * Reload the manager with the same tournament to update any changes.
     *
     * @return boolean
     */
    public function reload()
    {
        return $this->load($this->match->id);
    }

    /**
     * Add an error message to the array of error messages.
     *
     * @param String $message
     */
    protected function _addErrorMessage($message)
    {
        $this->errorMessages[] = $message;
    }

    /**
     * Retrieve all error messages for this instance.
     *
     * @return array
     */
    public function getErrorMessages()
    {
        return $this->errorMessages;
    }

}
